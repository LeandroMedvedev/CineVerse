// <auto-generated />
using System;
using CineVerse.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231218013038_AddTables")]
    partial class AddTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CartPhysicalMedia", b =>
                {
                    b.Property<int>("CartsCartId")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalMediasPhysicalMediaId")
                        .HasColumnType("int");

                    b.HasKey("CartsCartId", "PhysicalMediasPhysicalMediaId");

                    b.HasIndex("PhysicalMediasPhysicalMediaId");

                    b.ToTable("CartPhysicalMedia");
                });

            modelBuilder.Entity("CineVerse.API.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<float>("Freight")
                        .HasColumnType("real");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.HasKey("CartId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("CineVerse.API.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("CineVerse.API.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("CineVerse.API.Models.PhysicalMedia", b =>
                {
                    b.Property<int>("PhysicalMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicalMediaId"));

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Premiere")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Runtime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("PhysicalMediaId");

                    b.ToTable("PhysicalMedia");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CineVerse.API.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PhysicalMediaId")
                        .HasColumnType("int");

                    b.Property<byte>("Quantity")
                        .HasColumnType("tinyint");

                    b.HasKey("StockId");

                    b.HasIndex("PhysicalMediaId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("GenrePhysicalMedia", b =>
                {
                    b.Property<int>("GenresGenreId")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalMediasPhysicalMediaId")
                        .HasColumnType("int");

                    b.HasKey("GenresGenreId", "PhysicalMediasPhysicalMediaId");

                    b.HasIndex("PhysicalMediasPhysicalMediaId");

                    b.ToTable("GenrePhysicalMedia");
                });

            modelBuilder.Entity("CineVerse.API.Models.Movie", b =>
                {
                    b.HasBaseType("CineVerse.API.Models.PhysicalMedia");

                    b.Property<bool>("BasedOnBooks")
                        .HasColumnType("bit");

                    b.Property<bool>("BasedOnRealFacts")
                        .HasColumnType("bit");

                    b.Property<bool>("Dubbed")
                        .HasColumnType("bit");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("CineVerse.API.Models.Serie", b =>
                {
                    b.HasBaseType("CineVerse.API.Models.PhysicalMedia");

                    b.Property<bool>("Awarded")
                        .HasColumnType("bit");

                    b.Property<string>("Episodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seasons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.ToTable("Serie", (string)null);
                });

            modelBuilder.Entity("CartPhysicalMedia", b =>
                {
                    b.HasOne("CineVerse.API.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CineVerse.API.Models.PhysicalMedia", null)
                        .WithMany()
                        .HasForeignKey("PhysicalMediasPhysicalMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CineVerse.API.Models.Stock", b =>
                {
                    b.HasOne("CineVerse.API.Models.PhysicalMedia", null)
                        .WithMany("Stocks")
                        .HasForeignKey("PhysicalMediaId");
                });

            modelBuilder.Entity("GenrePhysicalMedia", b =>
                {
                    b.HasOne("CineVerse.API.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CineVerse.API.Models.PhysicalMedia", null)
                        .WithMany()
                        .HasForeignKey("PhysicalMediasPhysicalMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CineVerse.API.Models.Movie", b =>
                {
                    b.HasOne("CineVerse.API.Models.PhysicalMedia", null)
                        .WithOne()
                        .HasForeignKey("CineVerse.API.Models.Movie", "PhysicalMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CineVerse.API.Models.Serie", b =>
                {
                    b.HasOne("CineVerse.API.Models.PhysicalMedia", null)
                        .WithOne()
                        .HasForeignKey("CineVerse.API.Models.Serie", "PhysicalMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CineVerse.API.Models.PhysicalMedia", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
